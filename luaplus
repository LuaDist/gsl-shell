#!/usr/bin/env luajit

local ffi  = require('ffi')
local lpeg = require('lpeg')
local util = require('util')
local compiler = require('compiler')

local srcname = arg[1]
if not srcname then
   print("usage :"..arg[0].." <script>")
   os.exit(0)
end
local srcfile = assert(io.open(srcname))

local src = srcfile:read('*a')
srcfile:close()

local lua  = compiler.compile(src, '@'..srcname)
local main = assert(loadstring(lua, '='..srcname))

local function __is__(a, b)
   if type(a) == 'cdata' then
      return ffi.istype(a, b)
   else
      local m = getmetatable(a)
      while m do
         if m == b then return true end
         m = m.__base
      end
   end
   return false
end

local Class = { }
function Class.__call(class, ...)
   local obj
   if class.new then
      obj = class:new(...)
   else
      obj = { }
      setmetatable(obj, class)
      if class.init then
         class.init(obj, ...)
      end
   end
   return obj
end
local function class(name, base, body)
   local class = { __name = name, __base = base }
   class.__getters__ = setmetatable({ }, { __index = base.__getters__ })
   class.__setters__ = setmetatable({ }, { __index = base.__setters__ })

   function class.__index(o, k)
      if class.__getters__[k] then
         return class.__getters__[k](o)
      end
      return class[k]
   end
   function class.__newindex(o, k, v)
      if class.__setters__[k] then
         class.__setters__[k](o, v)
      else
         rawset(o, k, v)
      end
   end
   function class.__tostring(o)
      if o.toString then
         return o:toString()
      else
         return string.format('<%s>:%p', name, o)
      end
   end
   body(setmetatable({ }, class), base)
   return setmetatable(class, Class)
end

local Object = setmetatable({ }, Class)
Object.init = function()
   return Object:create({ }, { })
end
function Object:defineProperties(obj, props)
   local m = getmetatable(obj)
   for k, d in pairs(props) do
      if d.get then
         m.__getters__[k] = d.get
      elseif d.set then
         m.__setters__[k] = d.set
      else
         rawset(m, k, d.value)
      end
   end
   return obj 
end
function Object:create(proto, props)
   local m = { }
   m.__getters__ = { }
   m.__setters__ = { }
   function m.__index(o, k)
      if m.__getters__[k] then
         return m.__getters__[k](o)
      elseif proto then
         return proto[k]
      end
      return nil
   end
   function m.__newindex(o, k, v)
      if m.__setters__[k] then
         m.__setters__[k](o, v)
      else
         rawset(o, k, v)
      end
   end
   function m.__tostring(o)
      if o.toString then
         return o:toString()
      else
         return string.format('<Object>:%p', o)
      end
   end

   local o = { }
   for k, d in pairs(props) do
      if d.get then
         m.__getters__[k] = d.get
      elseif d.set then
         m.__setters__[k] = d.set
      else
         o[k] = d.value
      end
   end
   return setmetatable(o, m)
end

local Array = setmetatable({ }, Class)
function Array:new(...)
   return setmetatable({
      length = select('#', ...), [0] = select(1, ...), select(2, ...)
   }, self)
end
function Array:init() end
function Array.__iter(a)
   local l = a.length
   local i = -1
   return function(a)
      i = i + 1
      local v = a[i]
      if i < l then
         return i, v
      end
      return nil
   end, a
end
function Array.__pairs(a)
   local l = a.length
   return function(a, p)
      local i = p + 1
      local v = a[i]
      if i < l then
         return i, v
      end
   end, a, -1
end
function Array:join(sep)
   return table.concat({ Array.__spread(self) }, sep)
end
function Array.__spread(a)
   return unpack(a, 0, a.length - 1)
end
function Array.__len(a)
   return a.length
end
function Array.__tostring(a)
   if a.toString then
      return a:toString()
   end
   return string.format("[Array: %p]", this)
end
function Array.__index(a, k)
   if Array[k] then
      return Array[k]
   end
   return nil
end
function Array.__newindex(a, i, v)
   if type(i) == 'number' and i >= a.length then
      a.length = i + 1
   end
   rawset(a, i, v)
end
function Array:toString()
   local b = { }
   for i=0, self.length - 1 do
      b[#b + 1] = tostring(self[i])
   end
   return table.concat(b, ', ')
end

local function try(try, catch, finally)
   local ok, rv = xpcall(try, catch)
   if finally then finally() end
   return rv
end

local String = class("String", Object, function(this, super)
   Object:defineProperties(this, {
      init = {
         value = function(this, that)
            return tostring(that)
         end
      },
      match = {
         value = function(this, regex)
            local capt = new(Array)
            while true do
               local result = regex:exec(this)
               if result == nil then
                  break
               end
               capt[capt.length] = result[1]
            end
            if capt.length > 0 then
               return capt
            else
               return nil
            end
         end
      },
      toString = {
         value = function(this)
            return this
         end
      }
   })
end)
debug.setmetatable("", String)

local RegExp = class("RegExp", Object, function(this, super)
   local pcre = require('pcre')

   Object:defineProperties(this, {
      init = {
         value = function(this, source, flags)
            flags = flags or ''
            this.index = 0
            this.input = ''
            this.source  = source
            local opts = 0
            if string.find(flags, 'i') then
               opts = opts + pcre.lib.PCRE_CASELESS
               this.ignoreCase = true
            end
            if string.find(flags, 'm') then
               opts = opts + pcre.lib.PCRE_MULTILINE
               this.multiLine = true
            end
            this.pattern = assert(pcre.compile(source, opts))
            if string.find(flags, 'g') then
               this.global = true
            end
         end
      },
      exec = {
         value = function(this, str)
            if this.input ~= str then
               this.input = str
               this.index = 0
            end
            local result = pcre.execute(this.pattern, this.input, this.index)
            if type(result) == 'table' then
               this.index = this.index + #result[1] + 1
               return result
            elseif result == pcre.lib.PCRE_ERROR_NOMATCH then
               return nil
            else
               error(result, 2)
            end
         end
      },
      test = {
         value = function(this, str)
            local result = pcre.execute(this.pattern, str)
            if type(result) == 'table' then
               return true
            else
               return false
            end
         end
      },
      toString = {
         value = function(this)
            return string.format('RegExp(%q)', tostring(this.source))
         end
      }
   })
end)

local Error = class("Error", Object, function(this, super)
   Object:defineProperties(this, {
      init = {
         value = function(this, mesg)
            this.message = mesg
            this.trace = debug.traceback(mesg, 2)
         end
      },
      toString = {
         value = function(this)
            return this.message
         end
      }
   })
end)

local function spread(o)
   local m = getmetatable(o)
   if m and m.__spread then
      return m.__spread(o)
   end
   return unpack(o)
end
local function each(o, ...)
   if type(o) == 'function' then
      return o, ...
   end
   local m = getmetatable(o)
   if m and m.__iter then
      return m.__iter(o, ...)
   end
   return pairs(o)
end

local Range = { }
Range.__index = Range
function Range.__in(self, that)
   local n = tonumber(that)
   if type(n) == 'number' and n == n then
      return n >= self.min and n <= self.max
   end
   return false
end
function Range.__iter(self)
   local i, r = self.left, self.right
   local n = i <= r and 1 or -1
   return function()
      local j = i
      i = i + n
      if n > 0 and j > r then
         return nil
      elseif n < 0 and j < r then
         return nil
      end
      return j
   end
end
local function range(left, right, inclusive)
   return setmetatable({
      left = left,
      right = right,
      inclusive = inclusive == true,
   }, Range)
end
function __in__(this, that)
   local m = getmetatable(that)
   if m and m.__in then
      return m.__in(this)
   end
   if type(that) == 'table' then
      return rawget(that, this) ~= nil
   end
   return false
end
setfenv(main, setmetatable({
   try = try;
   Object = Object;
   Array  = Array;
   Error  = Error;
   RegExp = RegExp;
   class  = class;
   __range__  = range;
   __spread__ = spread;
   __each__   = each;
   __in__ = __in__;
   __is__ = __is__;
   throw   = error;
   assert  = function(...) return assert(...) end;
   print   = function(...) print(...) end;
}, { __index = _G }))

main()
