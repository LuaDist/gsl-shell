--  integration/qng.lua
--
--  Adapted to Lua by Francesco Abbate
--  
--  Copyright (C) 1996, 1997, 1998, 1999, 2000, 2007 Brian Gough
--  
--  This program is free software; you can redistribute it and/or modify
--  it under the terms of the GNU General Public License as published by
--  the Free Software Foundation; either version 3 of the License, or (at
--  your option) any later version.
--  
--  This program is distributed in the hope that it will be useful, but
--  WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--  General Public License for more details.
--  
--  You should have received a copy of the GNU General Public License
--  along with this program; if not, write to the Free Software
--  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
-- 
--  This file is automatically generated from qng.lua.in
--

local ffi = require "ffi"

local abs, min, max, pow = math.abs, math.min, math.max, math.pow

ffi.cdef[[
      typedef struct {
	 double fv1[5], fv2[5], fv3[5], fv4[5];
	 double savfun[21];
      } qng_workspace;
]]

local ws = ffi.new('qng_workspace')

local function rescale_error (err, result_abs, result_asc)
   err = abs(err)

   if result_asc ~= 0 and err ~= 0 then
      local scale = pow((200 * err / result_asc), 1.5)
      scale = min(scale, 1)
      err = result_asc * scale
   end

   if result_abs > 2.2250738585072e-308 / (50 * 2.2204460492503e-16) then
      local min_err = 50 * 2.2204460492503e-16 * result_abs
      err = max(err, min_err)
   end
   
   return err
end

local function qng(f, a, b, epsabs, epsrel)
   local result_kronrod, err
   local resasc          -- approximation to the integral of abs(f-i/(b-a))

   local half_length =  0.5 * (b - a)
   local abs_half_length = abs(half_length)
   local center = 0.5 * (b + a)
   local f_center = f(center)

   if epsabs <= 0 and (epsrel < 50 * 2.2204460492503e-16 or epsrel < 0.5e-28) then
      error "tolerance cannot be acheived with given epsabs and epsrel"
   end
   
   -- Compute the integral using the 10- and 21-point formula.

   local res10, res21 = 0, 0.14944555400292 * f_center
   -- approximation to the integral of abs(f)
   local resabs = 0.14944555400292 * abs(f_center) 

   do
      local abscissa, fval1, fval2, fval
      abscissa = half_length * 0.97390652851717
      fval1 = f(center + abscissa)
      fval2 = f(center - abscissa)
      fval = fval1 + fval2
      res10 = res10 + 0.066671344308688 * fval
      res21 = res21 + 0.032558162307965 * fval
      resabs = resabs + 0.032558162307965 * (abs(fval1) + abs(fval2))
      ws.savfun[0] = fval
      ws.fv1[0] = fval1
      ws.fv2[0] = fval2
      abscissa = half_length * 0.86506336668898
      fval1 = f(center + abscissa)
      fval2 = f(center - abscissa)
      fval = fval1 + fval2
      res10 = res10 + 0.14945134915058 * fval
      res21 = res21 + 0.07503967481092 * fval
      resabs = resabs + 0.07503967481092 * (abs(fval1) + abs(fval2))
      ws.savfun[1] = fval
      ws.fv1[1] = fval1
      ws.fv2[1] = fval2
      abscissa = half_length * 0.67940956829902
      fval1 = f(center + abscissa)
      fval2 = f(center - abscissa)
      fval = fval1 + fval2
      res10 = res10 + 0.21908636251598 * fval
      res21 = res21 + 0.1093871588023 * fval
      resabs = resabs + 0.1093871588023 * (abs(fval1) + abs(fval2))
      ws.savfun[2] = fval
      ws.fv1[2] = fval1
      ws.fv2[2] = fval2
      abscissa = half_length * 0.43339539412925
      fval1 = f(center + abscissa)
      fval2 = f(center - abscissa)
      fval = fval1 + fval2
      res10 = res10 + 0.26926671931 * fval
      res21 = res21 + 0.13470921731147 * fval
      resabs = resabs + 0.13470921731147 * (abs(fval1) + abs(fval2))
      ws.savfun[3] = fval
      ws.fv1[3] = fval1
      ws.fv2[3] = fval2
      abscissa = half_length * 0.14887433898163
      fval1 = f(center + abscissa)
      fval2 = f(center - abscissa)
      fval = fval1 + fval2
      res10 = res10 + 0.29552422471475 * fval
      res21 = res21 + 0.14773910490134 * fval
      resabs = resabs + 0.14773910490134 * (abs(fval1) + abs(fval2))
      ws.savfun[4] = fval
      ws.fv1[4] = fval1
      ws.fv2[4] = fval2
   end

   do
      local abscissa, fval1, fval2, fval
      abscissa = half_length * 0.99565716302581
      fval1 = f(center + abscissa)
      fval2 = f(center - abscissa)
      fval = fval1 + fval2
      res21 = res21 + 0.011694638867372 * fval
      resabs = resabs + 0.011694638867372 * (abs(fval1) + abs(fval2))
      ws.savfun[5] = fval
      ws.fv3[0] = fval1
      ws.fv4[0] = fval2
      abscissa = half_length * 0.93015749135571
      fval1 = f(center + abscissa)
      fval2 = f(center - abscissa)
      fval = fval1 + fval2
      res21 = res21 + 0.054755896574352 * fval
      resabs = resabs + 0.054755896574352 * (abs(fval1) + abs(fval2))
      ws.savfun[6] = fval
      ws.fv3[1] = fval1
      ws.fv4[1] = fval2
      abscissa = half_length * 0.78081772658642
      fval1 = f(center + abscissa)
      fval2 = f(center - abscissa)
      fval = fval1 + fval2
      res21 = res21 + 0.093125454583698 * fval
      resabs = resabs + 0.093125454583698 * (abs(fval1) + abs(fval2))
      ws.savfun[7] = fval
      ws.fv3[2] = fval1
      ws.fv4[2] = fval2
      abscissa = half_length * 0.5627571346686
      fval1 = f(center + abscissa)
      fval2 = f(center - abscissa)
      fval = fval1 + fval2
      res21 = res21 + 0.12349197626207 * fval
      resabs = resabs + 0.12349197626207 * (abs(fval1) + abs(fval2))
      ws.savfun[8] = fval
      ws.fv3[3] = fval1
      ws.fv4[3] = fval2
      abscissa = half_length * 0.29439286270146
      fval1 = f(center + abscissa)
      fval2 = f(center - abscissa)
      fval = fval1 + fval2
      res21 = res21 + 0.14277593857706 * fval
      resabs = resabs + 0.14277593857706 * (abs(fval1) + abs(fval2))
      ws.savfun[9] = fval
      ws.fv3[4] = fval1
      ws.fv4[4] = fval2
   end

   resabs = resabs * abs_half_length 

   do 
      local mean = 0.5 * res21
      
      resasc = 0.14944555400292 * abs(f_center - mean)
      
      resasc = resasc + (0.032558162307965 * (abs(ws.fv1[0] - mean) + abs(ws.fv2[0] - mean)) + 0.011694638867372 * (abs(ws.fv3[0] - mean) + abs(ws.fv4[0] - mean)))
      resasc = resasc + (0.07503967481092 * (abs(ws.fv1[1] - mean) + abs(ws.fv2[1] - mean)) + 0.054755896574352 * (abs(ws.fv3[1] - mean) + abs(ws.fv4[1] - mean)))
      resasc = resasc + (0.1093871588023 * (abs(ws.fv1[2] - mean) + abs(ws.fv2[2] - mean)) + 0.093125454583698 * (abs(ws.fv3[2] - mean) + abs(ws.fv4[2] - mean)))
      resasc = resasc + (0.13470921731147 * (abs(ws.fv1[3] - mean) + abs(ws.fv2[3] - mean)) + 0.12349197626207 * (abs(ws.fv3[3] - mean) + abs(ws.fv4[3] - mean)))
      resasc = resasc + (0.14773910490134 * (abs(ws.fv1[4] - mean) + abs(ws.fv2[4] - mean)) + 0.14277593857706 * (abs(ws.fv3[4] - mean) + abs(ws.fv4[4] - mean)))
      resasc = resasc * abs_half_length 
   end

   result_kronrod = res21 * half_length

   err = rescale_error ((res21 - res10) * half_length, resabs, resasc) 

   --   test for convergence.

   if err < epsabs or err < epsrel * abs(result_kronrod) then
      return result_kronrod, err
   end

   -- compute the integral using the 43-point formula.

   local res43 = 0.074722147517403 * f_center

   res43 = res43 + ws.savfun[0] * 0.016296734289667
   res43 = res43 + ws.savfun[1] * 0.037522876120869
   res43 = res43 + ws.savfun[2] * 0.054694902058255
   res43 = res43 + ws.savfun[3] * 0.067355414609478
   res43 = res43 + ws.savfun[4] * 0.073870199632394
   res43 = res43 + ws.savfun[5] * 0.0057685560597698
   res43 = res43 + ws.savfun[6] * 0.027371890593249
   res43 = res43 + ws.savfun[7] * 0.046560826910429
   res43 = res43 + ws.savfun[8] * 0.061744995201443
   res43 = res43 + ws.savfun[9] * 0.071387267268693

   do
      local abscissa, fval
      abscissa = half_length * 0.99933336090193
      fval = f(center + abscissa) + f(center - abscissa)
      res43 = res43 + fval * 0.0018444776402124
      ws.savfun[10] = fval
      abscissa = half_length * 0.98743340290809
      fval = f(center + abscissa) + f(center - abscissa)
      res43 = res43 + fval * 0.010798689585892
      ws.savfun[11] = fval
      abscissa = half_length * 0.95480793481427
      fval = f(center + abscissa) + f(center - abscissa)
      res43 = res43 + fval * 0.021895363867795
      ws.savfun[12] = fval
      abscissa = half_length * 0.90014869574833
      fval = f(center + abscissa) + f(center - abscissa)
      res43 = res43 + fval * 0.032597463975346
      ws.savfun[13] = fval
      abscissa = half_length * 0.82519831498311
      fval = f(center + abscissa) + f(center - abscissa)
      res43 = res43 + fval * 0.042163137935192
      ws.savfun[14] = fval
      abscissa = half_length * 0.73214838898931
      fval = f(center + abscissa) + f(center - abscissa)
      res43 = res43 + fval * 0.050741939600185
      ws.savfun[15] = fval
      abscissa = half_length * 0.62284797053773
      fval = f(center + abscissa) + f(center - abscissa)
      res43 = res43 + fval * 0.058379395542619
      ws.savfun[16] = fval
      abscissa = half_length * 0.49947957407106
      fval = f(center + abscissa) + f(center - abscissa)
      res43 = res43 + fval * 0.064746404951446
      ws.savfun[17] = fval
      abscissa = half_length * 0.36490166134658
      fval = f(center + abscissa) + f(center - abscissa)
      res43 = res43 + fval * 0.069566197912356
      ws.savfun[18] = fval
      abscissa = half_length * 0.2222549197766
      fval = f(center + abscissa) + f(center - abscissa)
      res43 = res43 + fval * 0.072824441471833
      ws.savfun[19] = fval
      abscissa = half_length * 0.074650617461383
      fval = f(center + abscissa) + f(center - abscissa)
      res43 = res43 + fval * 0.074507751014175
      ws.savfun[20] = fval
   end

   --  test for convergence

   result_kronrod = res43 * half_length
   err = rescale_error ((res43 - res21) * half_length, resabs, resasc)

   if err < epsabs or err < epsrel * abs(result_kronrod) then
      return result_kronrod, err
   end

   -- compute the integral using the 87-point formula.

   local res87 = 0.037361073762679 * f_center

   res87 = res87 + ws.savfun[0] * 0.0081483773841492
   res87 = res87 + ws.savfun[1] * 0.018761438201563
   res87 = res87 + ws.savfun[2] * 0.027347451050052
   res87 = res87 + ws.savfun[3] * 0.033677707311638
   res87 = res87 + ws.savfun[4] * 0.036935099820428
   res87 = res87 + ws.savfun[5] * 0.0028848724302115
   res87 = res87 + ws.savfun[6] * 0.013685946022713
   res87 = res87 + ws.savfun[7] * 0.023280413502888
   res87 = res87 + ws.savfun[8] * 0.030872497611713
   res87 = res87 + ws.savfun[9] * 0.035693633639419
   res87 = res87 + ws.savfun[10] * 0.00091528334520224
   res87 = res87 + ws.savfun[11] * 0.0053992802193005
   res87 = res87 + ws.savfun[12] * 0.010947679601119
   res87 = res87 + ws.savfun[13] * 0.016298731696787
   res87 = res87 + ws.savfun[14] * 0.021081568889204
   res87 = res87 + ws.savfun[15] * 0.025370969769254
   res87 = res87 + ws.savfun[16] * 0.029189697756476
   res87 = res87 + ws.savfun[17] * 0.032373202467203
   res87 = res87 + ws.savfun[18] * 0.034783098950365
   res87 = res87 + ws.savfun[19] * 0.036412220731352
   res87 = res87 + ws.savfun[20] * 0.037253875503048

   do
      local abscissa
      abscissa = half_length * 0.99990297726273
      res87 = res87 + 0.00027414556376207 * (f(center + abscissa) + f(center - abscissa))
      abscissa = half_length * 0.99798989598668
      res87 = res87 + 0.0018071241550579 * (f(center + abscissa) + f(center - abscissa))
      abscissa = half_length * 0.99217549786069
      res87 = res87 + 0.0040968692827592 * (f(center + abscissa) + f(center - abscissa))
      abscissa = half_length * 0.98135816357271
      res87 = res87 + 0.0067582900518474 * (f(center + abscissa) + f(center - abscissa))
      abscissa = half_length * 0.96505762385838
      res87 = res87 + 0.0095499576722016 * (f(center + abscissa) + f(center - abscissa))
      abscissa = half_length * 0.94316761313367
      res87 = res87 + 0.012329447652245 * (f(center + abscissa) + f(center - abscissa))
      abscissa = half_length * 0.91580641468551
      res87 = res87 + 0.015010447346389 * (f(center + abscissa) + f(center - abscissa))
      abscissa = half_length * 0.88322165777132
      res87 = res87 + 0.017548967986243 * (f(center + abscissa) + f(center - abscissa))
      abscissa = half_length * 0.84571074846242
      res87 = res87 + 0.019938037786441 * (f(center + abscissa) + f(center - abscissa))
      abscissa = half_length * 0.80355765803523
      res87 = res87 + 0.022194935961012 * (f(center + abscissa) + f(center - abscissa))
      abscissa = half_length * 0.7570057306855
      res87 = res87 + 0.024339147126001 * (f(center + abscissa) + f(center - abscissa))
      abscissa = half_length * 0.70627320978732
      res87 = res87 + 0.026374505414839 * (f(center + abscissa) + f(center - abscissa))
      abscissa = half_length * 0.65158946650118
      res87 = res87 + 0.028286910788771 * (f(center + abscissa) + f(center - abscissa))
      abscissa = half_length * 0.59322337405796
      res87 = res87 + 0.030052581128093 * (f(center + abscissa) + f(center - abscissa))
      abscissa = half_length * 0.53149360597083
      res87 = res87 + 0.03164675137144 * (f(center + abscissa) + f(center - abscissa))
      abscissa = half_length * 0.46676362304202
      res87 = res87 + 0.033050413419979 * (f(center + abscissa) + f(center - abscissa))
      abscissa = half_length * 0.39942484785922
      res87 = res87 + 0.034255099704226 * (f(center + abscissa) + f(center - abscissa))
      abscissa = half_length * 0.32987487710619
      res87 = res87 + 0.035262412660157 * (f(center + abscissa) + f(center - abscissa))
      abscissa = half_length * 0.25850355920216
      res87 = res87 + 0.036076989622889 * (f(center + abscissa) + f(center - abscissa))
      abscissa = half_length * 0.18569539656835
      res87 = res87 + 0.036698604498456 * (f(center + abscissa) + f(center - abscissa))
      abscissa = half_length * 0.11184221317991
      res87 = res87 + 0.037120549269833 * (f(center + abscissa) + f(center - abscissa))
      abscissa = half_length * 0.03735212339462
      res87 = res87 + 0.037334228751935 * (f(center + abscissa) + f(center - abscissa))
   end

   --  test for convergence

   result_kronrod = res87 * half_length 
   
   err = rescale_error ((res87 - res43) * half_length, resabs, resasc)
   
   if err < epsabs or err < epsrel * abs(result_kronrod) then
      return result_kronrod, err
   end

   -- failed to converge
   error "failed to reach tolerance with highest-order rule"
end

return qng
